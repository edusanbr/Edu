{
  "cells": [
    {
      "cell_type": "markdown",
      "id": "6ad8e196",
      "metadata": {
        "id": "6ad8e196"
      },
      "source": [
        "##  Machine Learning - Previsão de ações\n",
        "\n",
        "<p> Criando um modelo preditivo completo para prever o preço de ações\n",
        "    \n",
        "<p> Para visualizar o código de uma determinada ação ou criptomoeda basta acessar o site https://br.financas.yahoo.com/    "
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Importar bibliotecas"
      ],
      "metadata": {
        "id": "J_lTY57Nnbcb"
      },
      "id": "J_lTY57Nnbcb"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c76952bf",
      "metadata": {
        "id": "c76952bf"
      },
      "outputs": [],
      "source": [
        "#importando a biblioteca do YahooFinance para baixar cotações\n",
        "#Caso não tenha instalado ainda esse pacote, basta digitar !pip3 install yfinance\n",
        "import yfinance as yF\n",
        "\n",
        "# Imports para manipulação de dados\n",
        "#import numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "# Imports para visualização\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "\n",
        "\n",
        "# Importando os pacotes para o modelo preditivo\n",
        "from sklearn.neural_network import MLPRegressor\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from sklearn import datasets, linear_model\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "\n",
        "\n",
        "\n",
        "#formatando valores com duas casas decimais\n",
        "pd.options.display.float_format = '{:.2f}'.format\n",
        "\n",
        "import warnings\n",
        "warnings.filterwarnings(\"ignore\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6429d466",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        },
        "id": "6429d466",
        "outputId": "37a4b291-f703-4a34-a0c8-510c69143bcf"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                           Open  High   Low  Close   Volume  Dividends  \\\n",
              "Date                                                                     \n",
              "2020-03-31 00:00:00-03:00 16.02 16.07 15.20  15.50   969430       0.00   \n",
              "2020-04-01 00:00:00-03:00 15.10 15.10 14.45  14.58   904530       0.01   \n",
              "2020-04-02 00:00:00-03:00 14.61 14.88 14.47  14.71   614350       0.00   \n",
              "2020-04-03 00:00:00-03:00 14.71 14.71 13.70  14.04  1300420       0.00   \n",
              "2020-04-06 00:00:00-03:00 14.79 15.17 14.56  14.76  1069200       0.00   \n",
              "\n",
              "                           Stock Splits  \n",
              "Date                                     \n",
              "2020-03-31 00:00:00-03:00          0.00  \n",
              "2020-04-01 00:00:00-03:00          0.00  \n",
              "2020-04-02 00:00:00-03:00          0.00  \n",
              "2020-04-03 00:00:00-03:00          0.00  \n",
              "2020-04-06 00:00:00-03:00          0.00  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6eaf3e39-df1f-4a38-9e37-72c726a77a8b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Volume</th>\n",
              "      <th>Dividends</th>\n",
              "      <th>Stock Splits</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2020-03-31 00:00:00-03:00</th>\n",
              "      <td>16.02</td>\n",
              "      <td>16.07</td>\n",
              "      <td>15.20</td>\n",
              "      <td>15.50</td>\n",
              "      <td>969430</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020-04-01 00:00:00-03:00</th>\n",
              "      <td>15.10</td>\n",
              "      <td>15.10</td>\n",
              "      <td>14.45</td>\n",
              "      <td>14.58</td>\n",
              "      <td>904530</td>\n",
              "      <td>0.01</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020-04-02 00:00:00-03:00</th>\n",
              "      <td>14.61</td>\n",
              "      <td>14.88</td>\n",
              "      <td>14.47</td>\n",
              "      <td>14.71</td>\n",
              "      <td>614350</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020-04-03 00:00:00-03:00</th>\n",
              "      <td>14.71</td>\n",
              "      <td>14.71</td>\n",
              "      <td>13.70</td>\n",
              "      <td>14.04</td>\n",
              "      <td>1300420</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020-04-06 00:00:00-03:00</th>\n",
              "      <td>14.79</td>\n",
              "      <td>15.17</td>\n",
              "      <td>14.56</td>\n",
              "      <td>14.76</td>\n",
              "      <td>1069200</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6eaf3e39-df1f-4a38-9e37-72c726a77a8b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6eaf3e39-df1f-4a38-9e37-72c726a77a8b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6eaf3e39-df1f-4a38-9e37-72c726a77a8b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d1da1665-d49c-44f3-8689-57c6bd251a24\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d1da1665-d49c-44f3-8689-57c6bd251a24')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d1da1665-d49c-44f3-8689-57c6bd251a24 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dados",
              "summary": "{\n  \"name\": \"dados\",\n  \"rows\": 1244,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2020-03-31 00:00:00-03:00\",\n        \"max\": \"2025-03-31 00:00:00-03:00\",\n        \"num_unique_values\": 1244,\n        \"samples\": [\n          \"2023-05-24 00:00:00-03:00\",\n          \"2024-11-07 00:00:00-03:00\",\n          \"2022-12-15 00:00:00-03:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.93449665784618,\n        \"min\": 14.06602753282446,\n        \"max\": 28.763998681689685,\n        \"num_unique_values\": 1242,\n        \"samples\": [\n          20.424934486068068,\n          23.918317587486357,\n          15.5018319247574\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"High\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.937432016007263,\n        \"min\": 14.19174861907959,\n        \"max\": 29.040000915527344,\n        \"num_unique_values\": 1244,\n        \"samples\": [\n          17.87868424841745,\n          27.990526553427987,\n          16.076547805678427\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.93553579179054,\n        \"min\": 13.696604377885954,\n        \"max\": 28.459999084472656,\n        \"num_unique_values\": 1243,\n        \"samples\": [\n          20.319150199765346,\n          23.70174347519397,\n          15.284371562398775\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.941940028152424,\n        \"min\": 14.040776252746582,\n        \"max\": 28.649999618530273,\n        \"num_unique_values\": 1183,\n        \"samples\": [\n          19.207223892211914,\n          25.642601013183594,\n          28.448301315307617\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 625794,\n        \"min\": 118800,\n        \"max\": 10778570,\n        \"num_unique_values\": 1169,\n        \"samples\": [\n          570900,\n          357170,\n          872850\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Dividends\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.04309720653033551,\n        \"min\": 0.0,\n        \"max\": 1.125125,\n        \"num_unique_values\": 27,\n        \"samples\": [\n          0.051345,\n          0.01765,\n          0.04874\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Stock Splits\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.031187638741805846,\n        \"min\": 0.0,\n        \"max\": 1.1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.1,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 78
        }
      ],
      "source": [
        "# Carrega o dataset\n",
        "Cotacoes = yF.Ticker(\"ITUB3.SA\")\n",
        "\n",
        "# Opções de períodos 1d, 5d, 1mo, 3mo, 6mo, 1y, 2y, 5y, 10y e ytd.\n",
        "dados = Cotacoes.history(period=\"5y\")\n",
        "dados.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2b9669cf",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "2b9669cf",
        "outputId": "b76e19df-3b72-4519-c932-31350bdec92d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                       Date  Open  High   Low  Close   Volume  Dividends  \\\n",
              "0 2020-03-31 00:00:00-03:00 16.02 16.07 15.20  15.50   969430       0.00   \n",
              "1 2020-04-01 00:00:00-03:00 15.10 15.10 14.45  14.58   904530       0.01   \n",
              "2 2020-04-02 00:00:00-03:00 14.61 14.88 14.47  14.71   614350       0.00   \n",
              "3 2020-04-03 00:00:00-03:00 14.71 14.71 13.70  14.04  1300420       0.00   \n",
              "4 2020-04-06 00:00:00-03:00 14.79 15.17 14.56  14.76  1069200       0.00   \n",
              "\n",
              "   Stock Splits  \n",
              "0          0.00  \n",
              "1          0.00  \n",
              "2          0.00  \n",
              "3          0.00  \n",
              "4          0.00  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-150059a5-b149-424f-8a8f-af474ab7da93\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Volume</th>\n",
              "      <th>Dividends</th>\n",
              "      <th>Stock Splits</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2020-03-31 00:00:00-03:00</td>\n",
              "      <td>16.02</td>\n",
              "      <td>16.07</td>\n",
              "      <td>15.20</td>\n",
              "      <td>15.50</td>\n",
              "      <td>969430</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2020-04-01 00:00:00-03:00</td>\n",
              "      <td>15.10</td>\n",
              "      <td>15.10</td>\n",
              "      <td>14.45</td>\n",
              "      <td>14.58</td>\n",
              "      <td>904530</td>\n",
              "      <td>0.01</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2020-04-02 00:00:00-03:00</td>\n",
              "      <td>14.61</td>\n",
              "      <td>14.88</td>\n",
              "      <td>14.47</td>\n",
              "      <td>14.71</td>\n",
              "      <td>614350</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2020-04-03 00:00:00-03:00</td>\n",
              "      <td>14.71</td>\n",
              "      <td>14.71</td>\n",
              "      <td>13.70</td>\n",
              "      <td>14.04</td>\n",
              "      <td>1300420</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2020-04-06 00:00:00-03:00</td>\n",
              "      <td>14.79</td>\n",
              "      <td>15.17</td>\n",
              "      <td>14.56</td>\n",
              "      <td>14.76</td>\n",
              "      <td>1069200</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-150059a5-b149-424f-8a8f-af474ab7da93')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-150059a5-b149-424f-8a8f-af474ab7da93 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-150059a5-b149-424f-8a8f-af474ab7da93');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-37efbd52-1e1a-43f5-83a8-d4baebf95f3c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-37efbd52-1e1a-43f5-83a8-d4baebf95f3c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-37efbd52-1e1a-43f5-83a8-d4baebf95f3c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dados",
              "summary": "{\n  \"name\": \"dados\",\n  \"rows\": 1244,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2020-03-31 00:00:00-03:00\",\n        \"max\": \"2025-03-31 00:00:00-03:00\",\n        \"num_unique_values\": 1244,\n        \"samples\": [\n          \"2023-05-24 00:00:00-03:00\",\n          \"2024-11-07 00:00:00-03:00\",\n          \"2022-12-15 00:00:00-03:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.93449665784618,\n        \"min\": 14.06602753282446,\n        \"max\": 28.763998681689685,\n        \"num_unique_values\": 1242,\n        \"samples\": [\n          20.424934486068068,\n          23.918317587486357,\n          15.5018319247574\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"High\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.937432016007263,\n        \"min\": 14.19174861907959,\n        \"max\": 29.040000915527344,\n        \"num_unique_values\": 1244,\n        \"samples\": [\n          17.87868424841745,\n          27.990526553427987,\n          16.076547805678427\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.93553579179054,\n        \"min\": 13.696604377885954,\n        \"max\": 28.459999084472656,\n        \"num_unique_values\": 1243,\n        \"samples\": [\n          20.319150199765346,\n          23.70174347519397,\n          15.284371562398775\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.941940028152424,\n        \"min\": 14.040776252746582,\n        \"max\": 28.649999618530273,\n        \"num_unique_values\": 1183,\n        \"samples\": [\n          19.207223892211914,\n          25.642601013183594,\n          28.448301315307617\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 625794,\n        \"min\": 118800,\n        \"max\": 10778570,\n        \"num_unique_values\": 1169,\n        \"samples\": [\n          570900,\n          357170,\n          872850\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Dividends\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.04309720653033551,\n        \"min\": 0.0,\n        \"max\": 1.125125,\n        \"num_unique_values\": 27,\n        \"samples\": [\n          0.051345,\n          0.01765,\n          0.04874\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Stock Splits\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.031187638741805846,\n        \"min\": 0.0,\n        \"max\": 1.1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.1,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 79
        }
      ],
      "source": [
        "# Retirar o indice do campo data\n",
        "dados.reset_index(inplace=True)\n",
        "dados.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7295fbb5",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "7295fbb5",
        "outputId": "f313fcc1-411c-4d0d-d484-e90467189c8b"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                          Date  Open  High   Low  Close  Volume  Dividends  \\\n",
              "1239 2025-03-25 00:00:00-03:00 28.49 28.94 28.44  28.56  460600       0.00   \n",
              "1240 2025-03-26 00:00:00-03:00 28.60 28.66 28.28  28.31  634100       0.00   \n",
              "1241 2025-03-27 00:00:00-03:00 28.32 28.39 28.16  28.32  316800       0.00   \n",
              "1242 2025-03-28 00:00:00-03:00 28.31 28.31 27.91  28.09  606300       0.00   \n",
              "1243 2025-03-31 00:00:00-03:00 28.06 28.06 27.56  27.80  271700       0.00   \n",
              "\n",
              "      Stock Splits  \n",
              "1239          0.00  \n",
              "1240          0.00  \n",
              "1241          0.00  \n",
              "1242          0.00  \n",
              "1243          0.00  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d18959b6-a5c5-4a6b-a321-d1fa7087520f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Volume</th>\n",
              "      <th>Dividends</th>\n",
              "      <th>Stock Splits</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1239</th>\n",
              "      <td>2025-03-25 00:00:00-03:00</td>\n",
              "      <td>28.49</td>\n",
              "      <td>28.94</td>\n",
              "      <td>28.44</td>\n",
              "      <td>28.56</td>\n",
              "      <td>460600</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1240</th>\n",
              "      <td>2025-03-26 00:00:00-03:00</td>\n",
              "      <td>28.60</td>\n",
              "      <td>28.66</td>\n",
              "      <td>28.28</td>\n",
              "      <td>28.31</td>\n",
              "      <td>634100</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1241</th>\n",
              "      <td>2025-03-27 00:00:00-03:00</td>\n",
              "      <td>28.32</td>\n",
              "      <td>28.39</td>\n",
              "      <td>28.16</td>\n",
              "      <td>28.32</td>\n",
              "      <td>316800</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1242</th>\n",
              "      <td>2025-03-28 00:00:00-03:00</td>\n",
              "      <td>28.31</td>\n",
              "      <td>28.31</td>\n",
              "      <td>27.91</td>\n",
              "      <td>28.09</td>\n",
              "      <td>606300</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1243</th>\n",
              "      <td>2025-03-31 00:00:00-03:00</td>\n",
              "      <td>28.06</td>\n",
              "      <td>28.06</td>\n",
              "      <td>27.56</td>\n",
              "      <td>27.80</td>\n",
              "      <td>271700</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d18959b6-a5c5-4a6b-a321-d1fa7087520f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d18959b6-a5c5-4a6b-a321-d1fa7087520f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d18959b6-a5c5-4a6b-a321-d1fa7087520f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-03d2ed22-d667-4b7f-a84f-297ca9674f6c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-03d2ed22-d667-4b7f-a84f-297ca9674f6c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-03d2ed22-d667-4b7f-a84f-297ca9674f6c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"dados\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2025-03-25 00:00:00-03:00\",\n        \"max\": \"2025-03-31 00:00:00-03:00\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2025-03-26 00:00:00-03:00\",\n          \"2025-03-31 00:00:00-03:00\",\n          \"2025-03-27 00:00:00-03:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.20525624965243103,\n        \"min\": 28.059999465942383,\n        \"max\": 28.600000381469727,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          28.600000381469727,\n          28.059999465942383,\n          28.31999969482422\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"High\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.33803888670595234,\n        \"min\": 28.059999465942383,\n        \"max\": 28.940000534057617,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          28.65999984741211,\n          28.059999465942383,\n          28.389999389648438\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.34452911694655197,\n        \"min\": 27.559999465942383,\n        \"max\": 28.440000534057617,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          28.280000686645508,\n          27.559999465942383,\n          28.15999984741211\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.28588462052151536,\n        \"min\": 27.799999237060547,\n        \"max\": 28.559999465942383,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          28.309999465942383,\n          27.799999237060547,\n          28.31999969482422\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 164054,\n        \"min\": 271700,\n        \"max\": 634100,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          634100,\n          271700,\n          316800\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Dividends\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Stock Splits\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 80
        }
      ],
      "source": [
        "dados.tail()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "30272f15",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "30272f15",
        "outputId": "fe89a332-485f-4b87-bd28-33242783a25c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                          Date  Open  High   Low  Close  Volume  Dividends  \\\n",
              "1238 2025-03-24 00:00:00-03:00 28.46 28.47 28.25  28.46  372000       0.00   \n",
              "1239 2025-03-25 00:00:00-03:00 28.49 28.94 28.44  28.56  460600       0.00   \n",
              "1240 2025-03-26 00:00:00-03:00 28.60 28.66 28.28  28.31  634100       0.00   \n",
              "1241 2025-03-27 00:00:00-03:00 28.32 28.39 28.16  28.32  316800       0.00   \n",
              "1242 2025-03-28 00:00:00-03:00 28.31 28.31 27.91  28.09  606300       0.00   \n",
              "\n",
              "      Stock Splits  \n",
              "1238          0.00  \n",
              "1239          0.00  \n",
              "1240          0.00  \n",
              "1241          0.00  \n",
              "1242          0.00  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6bace226-7484-47ae-854f-1ad2f7412f8f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Volume</th>\n",
              "      <th>Dividends</th>\n",
              "      <th>Stock Splits</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1238</th>\n",
              "      <td>2025-03-24 00:00:00-03:00</td>\n",
              "      <td>28.46</td>\n",
              "      <td>28.47</td>\n",
              "      <td>28.25</td>\n",
              "      <td>28.46</td>\n",
              "      <td>372000</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1239</th>\n",
              "      <td>2025-03-25 00:00:00-03:00</td>\n",
              "      <td>28.49</td>\n",
              "      <td>28.94</td>\n",
              "      <td>28.44</td>\n",
              "      <td>28.56</td>\n",
              "      <td>460600</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1240</th>\n",
              "      <td>2025-03-26 00:00:00-03:00</td>\n",
              "      <td>28.60</td>\n",
              "      <td>28.66</td>\n",
              "      <td>28.28</td>\n",
              "      <td>28.31</td>\n",
              "      <td>634100</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1241</th>\n",
              "      <td>2025-03-27 00:00:00-03:00</td>\n",
              "      <td>28.32</td>\n",
              "      <td>28.39</td>\n",
              "      <td>28.16</td>\n",
              "      <td>28.32</td>\n",
              "      <td>316800</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1242</th>\n",
              "      <td>2025-03-28 00:00:00-03:00</td>\n",
              "      <td>28.31</td>\n",
              "      <td>28.31</td>\n",
              "      <td>27.91</td>\n",
              "      <td>28.09</td>\n",
              "      <td>606300</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6bace226-7484-47ae-854f-1ad2f7412f8f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6bace226-7484-47ae-854f-1ad2f7412f8f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6bace226-7484-47ae-854f-1ad2f7412f8f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b57104d7-58cf-4c18-bae4-267c7749bec3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b57104d7-58cf-4c18-bae4-267c7749bec3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b57104d7-58cf-4c18-bae4-267c7749bec3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"dados\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2025-03-24 00:00:00-03:00\",\n        \"max\": \"2025-03-28 00:00:00-03:00\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2025-03-25 00:00:00-03:00\",\n          \"2025-03-28 00:00:00-03:00\",\n          \"2025-03-26 00:00:00-03:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.12218864701939515,\n        \"min\": 28.309999465942383,\n        \"max\": 28.600000381469727,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          28.489999771118164,\n          28.309999465942383,\n          28.600000381469727\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"High\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2518536063454026,\n        \"min\": 28.309999465942383,\n        \"max\": 28.940000534057617,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          28.940000534057617,\n          28.309999465942383,\n          28.65999984741211\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.19485921345367752,\n        \"min\": 27.90999984741211,\n        \"max\": 28.440000534057617,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          28.440000534057617,\n          27.90999984741211,\n          28.280000686645508\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.17767916832378575,\n        \"min\": 28.09000015258789,\n        \"max\": 28.559999465942383,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          28.559999465942383,\n          28.09000015258789,\n          28.309999465942383\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 139957,\n        \"min\": 316800,\n        \"max\": 634100,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          460600,\n          606300,\n          634100\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Dividends\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Stock Splits\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        "dados.drop(dados.tail(1).index,inplace=True)\n",
        "dados.tail()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "beddb191",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "beddb191",
        "outputId": "407938fa-898d-4cae-c6ea-efb3d48dd431"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                       Data  Abertura  Maximo  Minimo  Fechamento   Volume\n",
              "0 2020-03-31 00:00:00-03:00     16.02   16.07   15.20       15.50   969430\n",
              "1 2020-04-01 00:00:00-03:00     15.10   15.10   14.45       14.58   904530\n",
              "2 2020-04-02 00:00:00-03:00     14.61   14.88   14.47       14.71   614350\n",
              "3 2020-04-03 00:00:00-03:00     14.71   14.71   13.70       14.04  1300420\n",
              "4 2020-04-06 00:00:00-03:00     14.79   15.17   14.56       14.76  1069200"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-83848c0b-8389-40cb-98f1-2b0476a9cc1f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Data</th>\n",
              "      <th>Abertura</th>\n",
              "      <th>Maximo</th>\n",
              "      <th>Minimo</th>\n",
              "      <th>Fechamento</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2020-03-31 00:00:00-03:00</td>\n",
              "      <td>16.02</td>\n",
              "      <td>16.07</td>\n",
              "      <td>15.20</td>\n",
              "      <td>15.50</td>\n",
              "      <td>969430</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2020-04-01 00:00:00-03:00</td>\n",
              "      <td>15.10</td>\n",
              "      <td>15.10</td>\n",
              "      <td>14.45</td>\n",
              "      <td>14.58</td>\n",
              "      <td>904530</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2020-04-02 00:00:00-03:00</td>\n",
              "      <td>14.61</td>\n",
              "      <td>14.88</td>\n",
              "      <td>14.47</td>\n",
              "      <td>14.71</td>\n",
              "      <td>614350</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2020-04-03 00:00:00-03:00</td>\n",
              "      <td>14.71</td>\n",
              "      <td>14.71</td>\n",
              "      <td>13.70</td>\n",
              "      <td>14.04</td>\n",
              "      <td>1300420</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2020-04-06 00:00:00-03:00</td>\n",
              "      <td>14.79</td>\n",
              "      <td>15.17</td>\n",
              "      <td>14.56</td>\n",
              "      <td>14.76</td>\n",
              "      <td>1069200</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-83848c0b-8389-40cb-98f1-2b0476a9cc1f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-83848c0b-8389-40cb-98f1-2b0476a9cc1f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-83848c0b-8389-40cb-98f1-2b0476a9cc1f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a5bbb29d-a84f-4ca0-bd00-db175a8b4a9e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a5bbb29d-a84f-4ca0-bd00-db175a8b4a9e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a5bbb29d-a84f-4ca0-bd00-db175a8b4a9e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dados",
              "summary": "{\n  \"name\": \"dados\",\n  \"rows\": 1244,\n  \"fields\": [\n    {\n      \"column\": \"Data\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2020-03-31 00:00:00-03:00\",\n        \"max\": \"2025-03-31 00:00:00-03:00\",\n        \"num_unique_values\": 1244,\n        \"samples\": [\n          \"2023-05-24 00:00:00-03:00\",\n          \"2024-11-07 00:00:00-03:00\",\n          \"2022-12-15 00:00:00-03:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Abertura\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.93449665784618,\n        \"min\": 14.06602753282446,\n        \"max\": 28.763998681689685,\n        \"num_unique_values\": 1242,\n        \"samples\": [\n          20.424934486068068,\n          23.918317587486357,\n          15.5018319247574\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Maximo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.937432016007263,\n        \"min\": 14.19174861907959,\n        \"max\": 29.040000915527344,\n        \"num_unique_values\": 1244,\n        \"samples\": [\n          17.87868424841745,\n          27.990526553427987,\n          16.076547805678427\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Minimo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.93553579179054,\n        \"min\": 13.696604377885954,\n        \"max\": 28.459999084472656,\n        \"num_unique_values\": 1243,\n        \"samples\": [\n          20.319150199765346,\n          23.70174347519397,\n          15.284371562398775\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fechamento\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.941940028152424,\n        \"min\": 14.040776252746582,\n        \"max\": 28.649999618530273,\n        \"num_unique_values\": 1183,\n        \"samples\": [\n          19.207223892211914,\n          25.642601013183594,\n          28.448301315307617\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 625794,\n        \"min\": 118800,\n        \"max\": 10778570,\n        \"num_unique_values\": 1169,\n        \"samples\": [\n          570900,\n          357170,\n          872850\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 81
        }
      ],
      "source": [
        "# Vamos excluir as colunas que não serão utilizadas e renomear os campos\n",
        "dados.drop('Dividends', axis=1, inplace=True)\n",
        "dados.drop('Stock Splits', axis=1, inplace=True)\n",
        "dados.columns = ['Data','Abertura','Maximo','Minimo','Fechamento','Volume']\n",
        "dados.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0ec8f70d",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0ec8f70d",
        "outputId": "a6eeb9f4-4bd6-454e-a8a6-cd9fe891796c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Menor data:  2020-03-31 00:00:00-03:00\n",
            "Maior data: 2025-03-31 00:00:00-03:00\n"
          ]
        }
      ],
      "source": [
        "# Vamos observar o nosso range de dados\n",
        "print('Menor data: ', dados['Data'].min())\n",
        "print('Maior data:', dados['Data'].max())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "cf5f15fe",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "id": "cf5f15fe",
        "outputId": "c94b02d3-bbf2-4999-8bac-fd20908bda14"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Data          2025-03-31 00:00:00-03:00\n",
              "Abertura                          28.06\n",
              "Maximo                            28.06\n",
              "Minimo                            27.56\n",
              "Fechamento                        27.80\n",
              "Volume                           271700\n",
              "Name: 1243, dtype: object"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>1243</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Data</th>\n",
              "      <td>2025-03-31 00:00:00-03:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Abertura</th>\n",
              "      <td>28.06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Maximo</th>\n",
              "      <td>28.06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Minimo</th>\n",
              "      <td>27.56</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fechamento</th>\n",
              "      <td>27.80</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Volume</th>\n",
              "      <td>271700</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ]
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Vamos observar os dados referente a ultima data do nosso conjunto de dados\n",
        "display(dados.loc[dados.index.max()])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0d82ec4c",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "id": "0d82ec4c",
        "outputId": "93e5af43-6976-465e-f3f6-413980833e5a"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Data          datetime64[ns, America/Sao_Paulo]\n",
              "Abertura                                float64\n",
              "Maximo                                  float64\n",
              "Minimo                                  float64\n",
              "Fechamento                              float64\n",
              "Volume                                    int64\n",
              "dtype: object"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Data</th>\n",
              "      <td>datetime64[ns, America/Sao_Paulo]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Abertura</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Maximo</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Minimo</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fechamento</th>\n",
              "      <td>float64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Volume</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ]
          },
          "metadata": {},
          "execution_count": 84
        }
      ],
      "source": [
        "# Tipos de Dados\n",
        "dados.dtypes"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9d9c3579",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9d9c3579",
        "outputId": "470da300-abe5-4880-9da0-323b7d3b7bef"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1244, 6)"
            ]
          },
          "metadata": {},
          "execution_count": 85
        }
      ],
      "source": [
        "# Volume de dados\n",
        "dados.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a5798ffa",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "a5798ffa",
        "outputId": "9819abf4-ca74-4419-cb78-327f5fb9523e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Abertura  Maximo  Minimo  Fechamento      Volume\n",
              "count   1244.00 1244.00 1244.00     1244.00     1244.00\n",
              "mean      19.56   19.78   19.35       19.56   814209.05\n",
              "std        3.93    3.94    3.94        3.94   625794.31\n",
              "min       14.07   14.19   13.70       14.04   118800.00\n",
              "25%       16.59   16.81   16.35       16.56   459387.50\n",
              "50%       18.37   18.57   18.16       18.34   661485.00\n",
              "75%       22.99   23.16   22.86       22.99   989725.00\n",
              "max       28.76   29.04   28.46       28.65 10778570.00"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-536a2147-f7ce-4278-ac26-c65736beae67\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Abertura</th>\n",
              "      <th>Maximo</th>\n",
              "      <th>Minimo</th>\n",
              "      <th>Fechamento</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1244.00</td>\n",
              "      <td>1244.00</td>\n",
              "      <td>1244.00</td>\n",
              "      <td>1244.00</td>\n",
              "      <td>1244.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>19.56</td>\n",
              "      <td>19.78</td>\n",
              "      <td>19.35</td>\n",
              "      <td>19.56</td>\n",
              "      <td>814209.05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>3.93</td>\n",
              "      <td>3.94</td>\n",
              "      <td>3.94</td>\n",
              "      <td>3.94</td>\n",
              "      <td>625794.31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>14.07</td>\n",
              "      <td>14.19</td>\n",
              "      <td>13.70</td>\n",
              "      <td>14.04</td>\n",
              "      <td>118800.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>16.59</td>\n",
              "      <td>16.81</td>\n",
              "      <td>16.35</td>\n",
              "      <td>16.56</td>\n",
              "      <td>459387.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>18.37</td>\n",
              "      <td>18.57</td>\n",
              "      <td>18.16</td>\n",
              "      <td>18.34</td>\n",
              "      <td>661485.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>22.99</td>\n",
              "      <td>23.16</td>\n",
              "      <td>22.86</td>\n",
              "      <td>22.99</td>\n",
              "      <td>989725.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>28.76</td>\n",
              "      <td>29.04</td>\n",
              "      <td>28.46</td>\n",
              "      <td>28.65</td>\n",
              "      <td>10778570.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-536a2147-f7ce-4278-ac26-c65736beae67')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-536a2147-f7ce-4278-ac26-c65736beae67 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-536a2147-f7ce-4278-ac26-c65736beae67');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4f15b565-7ce7-4779-883a-4a902161dfb2\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4f15b565-7ce7-4779-883a-4a902161dfb2')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4f15b565-7ce7-4779-883a-4a902161dfb2 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"dados\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Abertura\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 433.60264655519603,\n        \"min\": 3.93449665784618,\n        \"max\": 1244.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          19.564020007997616,\n          18.368686675338523,\n          1244.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Maximo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 433.54278790880045,\n        \"min\": 3.937432016007263,\n        \"max\": 1244.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          19.776600261846056,\n          18.566656213261773,\n          1244.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Minimo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 433.67585677613874,\n        \"min\": 3.93553579179054,\n        \"max\": 1244.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          19.346970999680032,\n          18.15874312284909,\n          1244.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fechamento\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 433.61203663805054,\n        \"min\": 3.941940028152424,\n        \"max\": 1244.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          19.560369270024193,\n          18.33820629119873,\n          1244.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3640583.1504082344,\n        \"min\": 1244.0,\n        \"max\": 10778570.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          814209.0514469453,\n          661485.0,\n          1244.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 86
        }
      ],
      "source": [
        "# Sumário estatístico\n",
        "dados.describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a953e54f",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 454
        },
        "id": "a953e54f",
        "outputId": "20418e78-4427-4198-82fa-a36aa4f461fc"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Plot\n",
        "plt.plot(dados[\"Fechamento\"])\n",
        "plt.title(\"Preço Diário de Fechamento das Ações\", size = 14)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "351401f5",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "351401f5",
        "outputId": "0ff793e2-8fe7-4031-f73f-d9bfade05b31"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                       Data  Abertura  Maximo  Minimo  Fechamento   Volume\n",
              "0 2020-03-31 00:00:00-03:00     16.02   16.07   15.20       15.50   969430\n",
              "1 2020-04-01 00:00:00-03:00     15.10   15.10   14.45       14.58   904530\n",
              "2 2020-04-02 00:00:00-03:00     14.61   14.88   14.47       14.71   614350\n",
              "3 2020-04-03 00:00:00-03:00     14.71   14.71   13.70       14.04  1300420\n",
              "4 2020-04-06 00:00:00-03:00     14.79   15.17   14.56       14.76  1069200"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-279c02ad-9434-4f35-a113-9e2bb7296022\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Data</th>\n",
              "      <th>Abertura</th>\n",
              "      <th>Maximo</th>\n",
              "      <th>Minimo</th>\n",
              "      <th>Fechamento</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2020-03-31 00:00:00-03:00</td>\n",
              "      <td>16.02</td>\n",
              "      <td>16.07</td>\n",
              "      <td>15.20</td>\n",
              "      <td>15.50</td>\n",
              "      <td>969430</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2020-04-01 00:00:00-03:00</td>\n",
              "      <td>15.10</td>\n",
              "      <td>15.10</td>\n",
              "      <td>14.45</td>\n",
              "      <td>14.58</td>\n",
              "      <td>904530</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2020-04-02 00:00:00-03:00</td>\n",
              "      <td>14.61</td>\n",
              "      <td>14.88</td>\n",
              "      <td>14.47</td>\n",
              "      <td>14.71</td>\n",
              "      <td>614350</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2020-04-03 00:00:00-03:00</td>\n",
              "      <td>14.71</td>\n",
              "      <td>14.71</td>\n",
              "      <td>13.70</td>\n",
              "      <td>14.04</td>\n",
              "      <td>1300420</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2020-04-06 00:00:00-03:00</td>\n",
              "      <td>14.79</td>\n",
              "      <td>15.17</td>\n",
              "      <td>14.56</td>\n",
              "      <td>14.76</td>\n",
              "      <td>1069200</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-279c02ad-9434-4f35-a113-9e2bb7296022')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-279c02ad-9434-4f35-a113-9e2bb7296022 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-279c02ad-9434-4f35-a113-9e2bb7296022');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0ff03cb9-4d83-4750-a6ba-b18bda4c8cbc\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0ff03cb9-4d83-4750-a6ba-b18bda4c8cbc')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0ff03cb9-4d83-4750-a6ba-b18bda4c8cbc button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dados",
              "summary": "{\n  \"name\": \"dados\",\n  \"rows\": 1244,\n  \"fields\": [\n    {\n      \"column\": \"Data\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2020-03-31 00:00:00-03:00\",\n        \"max\": \"2025-03-31 00:00:00-03:00\",\n        \"num_unique_values\": 1244,\n        \"samples\": [\n          \"2023-05-24 00:00:00-03:00\",\n          \"2024-11-07 00:00:00-03:00\",\n          \"2022-12-15 00:00:00-03:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Abertura\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.93449665784618,\n        \"min\": 14.06602753282446,\n        \"max\": 28.763998681689685,\n        \"num_unique_values\": 1242,\n        \"samples\": [\n          20.424934486068068,\n          23.918317587486357,\n          15.5018319247574\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Maximo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.937432016007263,\n        \"min\": 14.19174861907959,\n        \"max\": 29.040000915527344,\n        \"num_unique_values\": 1244,\n        \"samples\": [\n          17.87868424841745,\n          27.990526553427987,\n          16.076547805678427\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Minimo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.93553579179054,\n        \"min\": 13.696604377885954,\n        \"max\": 28.459999084472656,\n        \"num_unique_values\": 1243,\n        \"samples\": [\n          20.319150199765346,\n          23.70174347519397,\n          15.284371562398775\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fechamento\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.941940028152424,\n        \"min\": 14.040776252746582,\n        \"max\": 28.649999618530273,\n        \"num_unique_values\": 1183,\n        \"samples\": [\n          19.207223892211914,\n          25.642601013183594,\n          28.448301315307617\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 625794,\n        \"min\": 118800,\n        \"max\": 10778570,\n        \"num_unique_values\": 1169,\n        \"samples\": [\n          570900,\n          357170,\n          872850\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 88
        }
      ],
      "source": [
        "dados.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e41c23ca",
      "metadata": {
        "id": "e41c23ca"
      },
      "outputs": [],
      "source": [
        "# Criando novos campos de Média Movel com 5 Dias, 14 Dias e 21 Dias\n",
        "dados['mm5d'] = dados['Fechamento'].rolling(5).mean()\n",
        "dados['mm14d'] = dados['Fechamento'].rolling(14).mean()\n",
        "dados['mm21d'] = dados['Fechamento'].rolling(21).mean()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2532a325",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 990
        },
        "id": "2532a325",
        "outputId": "8916e212-5953-4acc-94f5-1e95223d0f6f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                        Data  Abertura  Maximo  Minimo  Fechamento   Volume  \\\n",
              "0  2020-03-31 00:00:00-03:00     16.02   16.07   15.20       15.50   969430   \n",
              "1  2020-04-01 00:00:00-03:00     15.10   15.10   14.45       14.58   904530   \n",
              "2  2020-04-02 00:00:00-03:00     14.61   14.88   14.47       14.71   614350   \n",
              "3  2020-04-03 00:00:00-03:00     14.71   14.71   13.70       14.04  1300420   \n",
              "4  2020-04-06 00:00:00-03:00     14.79   15.17   14.56       14.76  1069200   \n",
              "5  2020-04-07 00:00:00-03:00     15.31   15.84   15.13       15.59  1356740   \n",
              "6  2020-04-08 00:00:00-03:00     15.33   16.13   15.33       16.13  1507770   \n",
              "7  2020-04-09 00:00:00-03:00     16.09   16.41   15.75       15.98  1458160   \n",
              "8  2020-04-13 00:00:00-03:00     16.02   16.21   15.54       16.01   681890   \n",
              "9  2020-04-14 00:00:00-03:00     16.28   16.63   16.04       16.04   647020   \n",
              "10 2020-04-15 00:00:00-03:00     16.01   16.12   15.47       15.64   889900   \n",
              "11 2020-04-16 00:00:00-03:00     15.94   15.94   15.22       15.45  1294480   \n",
              "12 2020-04-17 00:00:00-03:00     15.84   16.13   15.15       15.54  1062820   \n",
              "13 2020-04-20 00:00:00-03:00     15.37   15.57   15.14       15.47   768020   \n",
              "14 2020-04-22 00:00:00-03:00     15.47   15.67   15.19       15.31   795300   \n",
              "15 2020-04-23 00:00:00-03:00     15.52   15.61   14.92       14.92  1000670   \n",
              "16 2020-04-24 00:00:00-03:00     14.79   14.86   13.88       14.39  1856140   \n",
              "17 2020-04-27 00:00:00-03:00     14.75   15.03   14.36       14.56  1055890   \n",
              "18 2020-04-28 00:00:00-03:00     14.95   15.94   14.95       15.79  1241680   \n",
              "19 2020-04-29 00:00:00-03:00     15.91   16.32   15.79       15.96   672210   \n",
              "20 2020-04-30 00:00:00-03:00     15.57   15.74   15.42       15.45  1047530   \n",
              "21 2020-05-04 00:00:00-03:00     15.03   15.05   14.83       14.83   816640   \n",
              "22 2020-05-05 00:00:00-03:00     15.15   15.79   14.94       15.32   976690   \n",
              "23 2020-05-06 00:00:00-03:00     15.46   15.46   15.04       15.11  1122990   \n",
              "24 2020-05-07 00:00:00-03:00     15.45   15.45   14.41       14.62   686180   \n",
              "25 2020-05-08 00:00:00-03:00     14.62   15.39   14.62       15.00  1037300   \n",
              "26 2020-05-11 00:00:00-03:00     15.00   15.39   14.93       15.26  1159070   \n",
              "27 2020-05-12 00:00:00-03:00     15.26   15.33   14.68       14.69   824780   \n",
              "28 2020-05-13 00:00:00-03:00     14.76   14.94   14.34       14.65   691240   \n",
              "29 2020-05-14 00:00:00-03:00     14.47   15.10   14.09       15.10  1630310   \n",
              "\n",
              "    mm5d  mm14d  mm21d  \n",
              "0    NaN    NaN    NaN  \n",
              "1    NaN    NaN    NaN  \n",
              "2    NaN    NaN    NaN  \n",
              "3    NaN    NaN    NaN  \n",
              "4  14.72    NaN    NaN  \n",
              "5  14.74    NaN    NaN  \n",
              "6  15.05    NaN    NaN  \n",
              "7  15.30    NaN    NaN  \n",
              "8  15.69    NaN    NaN  \n",
              "9  15.95    NaN    NaN  \n",
              "10 15.96    NaN    NaN  \n",
              "11 15.82    NaN    NaN  \n",
              "12 15.74    NaN    NaN  \n",
              "13 15.63  15.39    NaN  \n",
              "14 15.48  15.37    NaN  \n",
              "15 15.34  15.40    NaN  \n",
              "16 15.13  15.38    NaN  \n",
              "17 14.93  15.41    NaN  \n",
              "18 14.99  15.49    NaN  \n",
              "19 15.12  15.51    NaN  \n",
              "20 15.23  15.47  15.32  \n",
              "21 15.32  15.38  15.29  \n",
              "22 15.47  15.33  15.33  \n",
              "23 15.34  15.27  15.35  \n",
              "24 15.07  15.20  15.37  \n",
              "25 14.98  15.16  15.39  \n",
              "26 15.06  15.14  15.37  \n",
              "27 14.94  15.09  15.30  \n",
              "28 14.84  15.04  15.24  \n",
              "29 14.94  15.05  15.20  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9456c93f-d3e2-4be6-9c83-9cc90913eb93\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Data</th>\n",
              "      <th>Abertura</th>\n",
              "      <th>Maximo</th>\n",
              "      <th>Minimo</th>\n",
              "      <th>Fechamento</th>\n",
              "      <th>Volume</th>\n",
              "      <th>mm5d</th>\n",
              "      <th>mm14d</th>\n",
              "      <th>mm21d</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2020-03-31 00:00:00-03:00</td>\n",
              "      <td>16.02</td>\n",
              "      <td>16.07</td>\n",
              "      <td>15.20</td>\n",
              "      <td>15.50</td>\n",
              "      <td>969430</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2020-04-01 00:00:00-03:00</td>\n",
              "      <td>15.10</td>\n",
              "      <td>15.10</td>\n",
              "      <td>14.45</td>\n",
              "      <td>14.58</td>\n",
              "      <td>904530</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2020-04-02 00:00:00-03:00</td>\n",
              "      <td>14.61</td>\n",
              "      <td>14.88</td>\n",
              "      <td>14.47</td>\n",
              "      <td>14.71</td>\n",
              "      <td>614350</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2020-04-03 00:00:00-03:00</td>\n",
              "      <td>14.71</td>\n",
              "      <td>14.71</td>\n",
              "      <td>13.70</td>\n",
              "      <td>14.04</td>\n",
              "      <td>1300420</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2020-04-06 00:00:00-03:00</td>\n",
              "      <td>14.79</td>\n",
              "      <td>15.17</td>\n",
              "      <td>14.56</td>\n",
              "      <td>14.76</td>\n",
              "      <td>1069200</td>\n",
              "      <td>14.72</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2020-04-07 00:00:00-03:00</td>\n",
              "      <td>15.31</td>\n",
              "      <td>15.84</td>\n",
              "      <td>15.13</td>\n",
              "      <td>15.59</td>\n",
              "      <td>1356740</td>\n",
              "      <td>14.74</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>2020-04-08 00:00:00-03:00</td>\n",
              "      <td>15.33</td>\n",
              "      <td>16.13</td>\n",
              "      <td>15.33</td>\n",
              "      <td>16.13</td>\n",
              "      <td>1507770</td>\n",
              "      <td>15.05</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>2020-04-09 00:00:00-03:00</td>\n",
              "      <td>16.09</td>\n",
              "      <td>16.41</td>\n",
              "      <td>15.75</td>\n",
              "      <td>15.98</td>\n",
              "      <td>1458160</td>\n",
              "      <td>15.30</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>2020-04-13 00:00:00-03:00</td>\n",
              "      <td>16.02</td>\n",
              "      <td>16.21</td>\n",
              "      <td>15.54</td>\n",
              "      <td>16.01</td>\n",
              "      <td>681890</td>\n",
              "      <td>15.69</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>2020-04-14 00:00:00-03:00</td>\n",
              "      <td>16.28</td>\n",
              "      <td>16.63</td>\n",
              "      <td>16.04</td>\n",
              "      <td>16.04</td>\n",
              "      <td>647020</td>\n",
              "      <td>15.95</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>2020-04-15 00:00:00-03:00</td>\n",
              "      <td>16.01</td>\n",
              "      <td>16.12</td>\n",
              "      <td>15.47</td>\n",
              "      <td>15.64</td>\n",
              "      <td>889900</td>\n",
              "      <td>15.96</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>2020-04-16 00:00:00-03:00</td>\n",
              "      <td>15.94</td>\n",
              "      <td>15.94</td>\n",
              "      <td>15.22</td>\n",
              "      <td>15.45</td>\n",
              "      <td>1294480</td>\n",
              "      <td>15.82</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>2020-04-17 00:00:00-03:00</td>\n",
              "      <td>15.84</td>\n",
              "      <td>16.13</td>\n",
              "      <td>15.15</td>\n",
              "      <td>15.54</td>\n",
              "      <td>1062820</td>\n",
              "      <td>15.74</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>2020-04-20 00:00:00-03:00</td>\n",
              "      <td>15.37</td>\n",
              "      <td>15.57</td>\n",
              "      <td>15.14</td>\n",
              "      <td>15.47</td>\n",
              "      <td>768020</td>\n",
              "      <td>15.63</td>\n",
              "      <td>15.39</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>2020-04-22 00:00:00-03:00</td>\n",
              "      <td>15.47</td>\n",
              "      <td>15.67</td>\n",
              "      <td>15.19</td>\n",
              "      <td>15.31</td>\n",
              "      <td>795300</td>\n",
              "      <td>15.48</td>\n",
              "      <td>15.37</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>2020-04-23 00:00:00-03:00</td>\n",
              "      <td>15.52</td>\n",
              "      <td>15.61</td>\n",
              "      <td>14.92</td>\n",
              "      <td>14.92</td>\n",
              "      <td>1000670</td>\n",
              "      <td>15.34</td>\n",
              "      <td>15.40</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>2020-04-24 00:00:00-03:00</td>\n",
              "      <td>14.79</td>\n",
              "      <td>14.86</td>\n",
              "      <td>13.88</td>\n",
              "      <td>14.39</td>\n",
              "      <td>1856140</td>\n",
              "      <td>15.13</td>\n",
              "      <td>15.38</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>2020-04-27 00:00:00-03:00</td>\n",
              "      <td>14.75</td>\n",
              "      <td>15.03</td>\n",
              "      <td>14.36</td>\n",
              "      <td>14.56</td>\n",
              "      <td>1055890</td>\n",
              "      <td>14.93</td>\n",
              "      <td>15.41</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>2020-04-28 00:00:00-03:00</td>\n",
              "      <td>14.95</td>\n",
              "      <td>15.94</td>\n",
              "      <td>14.95</td>\n",
              "      <td>15.79</td>\n",
              "      <td>1241680</td>\n",
              "      <td>14.99</td>\n",
              "      <td>15.49</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>2020-04-29 00:00:00-03:00</td>\n",
              "      <td>15.91</td>\n",
              "      <td>16.32</td>\n",
              "      <td>15.79</td>\n",
              "      <td>15.96</td>\n",
              "      <td>672210</td>\n",
              "      <td>15.12</td>\n",
              "      <td>15.51</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>2020-04-30 00:00:00-03:00</td>\n",
              "      <td>15.57</td>\n",
              "      <td>15.74</td>\n",
              "      <td>15.42</td>\n",
              "      <td>15.45</td>\n",
              "      <td>1047530</td>\n",
              "      <td>15.23</td>\n",
              "      <td>15.47</td>\n",
              "      <td>15.32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>2020-05-04 00:00:00-03:00</td>\n",
              "      <td>15.03</td>\n",
              "      <td>15.05</td>\n",
              "      <td>14.83</td>\n",
              "      <td>14.83</td>\n",
              "      <td>816640</td>\n",
              "      <td>15.32</td>\n",
              "      <td>15.38</td>\n",
              "      <td>15.29</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>2020-05-05 00:00:00-03:00</td>\n",
              "      <td>15.15</td>\n",
              "      <td>15.79</td>\n",
              "      <td>14.94</td>\n",
              "      <td>15.32</td>\n",
              "      <td>976690</td>\n",
              "      <td>15.47</td>\n",
              "      <td>15.33</td>\n",
              "      <td>15.33</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>2020-05-06 00:00:00-03:00</td>\n",
              "      <td>15.46</td>\n",
              "      <td>15.46</td>\n",
              "      <td>15.04</td>\n",
              "      <td>15.11</td>\n",
              "      <td>1122990</td>\n",
              "      <td>15.34</td>\n",
              "      <td>15.27</td>\n",
              "      <td>15.35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>2020-05-07 00:00:00-03:00</td>\n",
              "      <td>15.45</td>\n",
              "      <td>15.45</td>\n",
              "      <td>14.41</td>\n",
              "      <td>14.62</td>\n",
              "      <td>686180</td>\n",
              "      <td>15.07</td>\n",
              "      <td>15.20</td>\n",
              "      <td>15.37</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>2020-05-08 00:00:00-03:00</td>\n",
              "      <td>14.62</td>\n",
              "      <td>15.39</td>\n",
              "      <td>14.62</td>\n",
              "      <td>15.00</td>\n",
              "      <td>1037300</td>\n",
              "      <td>14.98</td>\n",
              "      <td>15.16</td>\n",
              "      <td>15.39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>2020-05-11 00:00:00-03:00</td>\n",
              "      <td>15.00</td>\n",
              "      <td>15.39</td>\n",
              "      <td>14.93</td>\n",
              "      <td>15.26</td>\n",
              "      <td>1159070</td>\n",
              "      <td>15.06</td>\n",
              "      <td>15.14</td>\n",
              "      <td>15.37</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>2020-05-12 00:00:00-03:00</td>\n",
              "      <td>15.26</td>\n",
              "      <td>15.33</td>\n",
              "      <td>14.68</td>\n",
              "      <td>14.69</td>\n",
              "      <td>824780</td>\n",
              "      <td>14.94</td>\n",
              "      <td>15.09</td>\n",
              "      <td>15.30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>2020-05-13 00:00:00-03:00</td>\n",
              "      <td>14.76</td>\n",
              "      <td>14.94</td>\n",
              "      <td>14.34</td>\n",
              "      <td>14.65</td>\n",
              "      <td>691240</td>\n",
              "      <td>14.84</td>\n",
              "      <td>15.04</td>\n",
              "      <td>15.24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>2020-05-14 00:00:00-03:00</td>\n",
              "      <td>14.47</td>\n",
              "      <td>15.10</td>\n",
              "      <td>14.09</td>\n",
              "      <td>15.10</td>\n",
              "      <td>1630310</td>\n",
              "      <td>14.94</td>\n",
              "      <td>15.05</td>\n",
              "      <td>15.20</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9456c93f-d3e2-4be6-9c83-9cc90913eb93')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9456c93f-d3e2-4be6-9c83-9cc90913eb93 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9456c93f-d3e2-4be6-9c83-9cc90913eb93');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c1b98a24-7639-47a5-9fbc-73027d322d02\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c1b98a24-7639-47a5-9fbc-73027d322d02')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c1b98a24-7639-47a5-9fbc-73027d322d02 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dados",
              "summary": "{\n  \"name\": \"dados\",\n  \"rows\": 1244,\n  \"fields\": [\n    {\n      \"column\": \"Data\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2020-03-31 00:00:00-03:00\",\n        \"max\": \"2025-03-31 00:00:00-03:00\",\n        \"num_unique_values\": 1244,\n        \"samples\": [\n          \"2023-05-24 00:00:00-03:00\",\n          \"2024-11-07 00:00:00-03:00\",\n          \"2022-12-15 00:00:00-03:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Abertura\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.93449665784618,\n        \"min\": 14.06602753282446,\n        \"max\": 28.763998681689685,\n        \"num_unique_values\": 1242,\n        \"samples\": [\n          20.424934486068068,\n          23.918317587486357,\n          15.5018319247574\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Maximo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.937432016007263,\n        \"min\": 14.19174861907959,\n        \"max\": 29.040000915527344,\n        \"num_unique_values\": 1244,\n        \"samples\": [\n          17.87868424841745,\n          27.990526553427987,\n          16.076547805678427\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Minimo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.93553579179054,\n        \"min\": 13.696604377885954,\n        \"max\": 28.459999084472656,\n        \"num_unique_values\": 1243,\n        \"samples\": [\n          20.319150199765346,\n          23.70174347519397,\n          15.284371562398775\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fechamento\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.941940028152424,\n        \"min\": 14.040776252746582,\n        \"max\": 28.649999618530273,\n        \"num_unique_values\": 1183,\n        \"samples\": [\n          19.207223892211914,\n          25.642601013183594,\n          28.448301315307617\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 625794,\n        \"min\": 118800,\n        \"max\": 10778570,\n        \"num_unique_values\": 1169,\n        \"samples\": [\n          570900,\n          357170,\n          872850\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mm5d\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.919327289426191,\n        \"min\": 14.178437805175781,\n        \"max\": 28.51399955749512,\n        \"num_unique_values\": 1237,\n        \"samples\": [\n          17.9030818939209,\n          19.625809097290038,\n          18.626055908203124\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mm14d\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.870865013817501,\n        \"min\": 14.312703336988177,\n        \"max\": 28.310905865260533,\n        \"num_unique_values\": 1229,\n        \"samples\": [\n          14.865381717681885,\n          26.963065692356654,\n          17.664798872811453\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mm21d\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.837710847895125,\n        \"min\": 14.445332572573708,\n        \"max\": 28.182735352289107,\n        \"num_unique_values\": 1224,\n        \"samples\": [\n          16.535100028628396,\n          17.42343521118164,\n          18.75856553940546\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 90
        }
      ],
      "source": [
        "dados.head(30)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "26a099e7",
      "metadata": {
        "id": "26a099e7"
      },
      "outputs": [],
      "source": [
        "dados.dropna(inplace=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "11b911fd",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "11b911fd",
        "outputId": "b3dce777-f787-41e2-b020-3b859d108795"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1224, 9)"
            ]
          },
          "metadata": {},
          "execution_count": 92
        }
      ],
      "source": [
        "dados.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b2fe58ea",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "b2fe58ea",
        "outputId": "07da85b7-8b9d-4495-8601-ab67d08c3094"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'linhas treino = 0:824 linhas teste = 0:824:1204 linhas validacao = 0:1204:1224'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 93
        }
      ],
      "source": [
        "qtd_linhas = len(dados)\n",
        "qtd_linhas_treino = qtd_linhas - 400\n",
        "qtd_linhas_teste = qtd_linhas - 20\n",
        "\n",
        "qtd_linhas_validacao = qtd_linhas_treino - qtd_linhas_teste\n",
        "\n",
        "info = (\n",
        "    f\"linhas treino = 0:{qtd_linhas_treino}\"\n",
        "    f\" linhas teste = 0:{qtd_linhas_treino}:{qtd_linhas_teste}\"\n",
        "    f\" linhas validacao = 0:{qtd_linhas_teste}:{qtd_linhas}\"\n",
        "\n",
        ")\n",
        "\n",
        "info"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "4a347145",
      "metadata": {
        "id": "4a347145"
      },
      "outputs": [],
      "source": [
        "# Separando variaveis PREDITORAS e variavel ALVO\n",
        "preditoras = dados.drop(['Data', 'Fechamento','Volume'], axis=1)\n",
        "target = dados['Fechamento']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b25a9779",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "b25a9779",
        "outputId": "cf82d716-97bd-4462-c607-0d56b3a29142"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Abertura  Maximo  Minimo  mm5d  mm14d  mm21d\n",
              "20     15.57   15.74   15.42 15.23  15.47  15.32\n",
              "21     15.03   15.05   14.83 15.32  15.38  15.29\n",
              "22     15.15   15.79   14.94 15.47  15.33  15.33\n",
              "23     15.46   15.46   15.04 15.34  15.27  15.35\n",
              "24     15.45   15.45   14.41 15.07  15.20  15.37"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-21bc1657-d3db-4b86-94cd-4572a5cf0203\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Abertura</th>\n",
              "      <th>Maximo</th>\n",
              "      <th>Minimo</th>\n",
              "      <th>mm5d</th>\n",
              "      <th>mm14d</th>\n",
              "      <th>mm21d</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>15.57</td>\n",
              "      <td>15.74</td>\n",
              "      <td>15.42</td>\n",
              "      <td>15.23</td>\n",
              "      <td>15.47</td>\n",
              "      <td>15.32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>15.03</td>\n",
              "      <td>15.05</td>\n",
              "      <td>14.83</td>\n",
              "      <td>15.32</td>\n",
              "      <td>15.38</td>\n",
              "      <td>15.29</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>15.15</td>\n",
              "      <td>15.79</td>\n",
              "      <td>14.94</td>\n",
              "      <td>15.47</td>\n",
              "      <td>15.33</td>\n",
              "      <td>15.33</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>15.46</td>\n",
              "      <td>15.46</td>\n",
              "      <td>15.04</td>\n",
              "      <td>15.34</td>\n",
              "      <td>15.27</td>\n",
              "      <td>15.35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>15.45</td>\n",
              "      <td>15.45</td>\n",
              "      <td>14.41</td>\n",
              "      <td>15.07</td>\n",
              "      <td>15.20</td>\n",
              "      <td>15.37</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-21bc1657-d3db-4b86-94cd-4572a5cf0203')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-21bc1657-d3db-4b86-94cd-4572a5cf0203 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-21bc1657-d3db-4b86-94cd-4572a5cf0203');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-32686275-9c9b-4181-8b79-4d15879bebf6\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-32686275-9c9b-4181-8b79-4d15879bebf6')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-32686275-9c9b-4181-8b79-4d15879bebf6 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "preditoras",
              "summary": "{\n  \"name\": \"preditoras\",\n  \"rows\": 1224,\n  \"fields\": [\n    {\n      \"column\": \"Abertura\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.930168554642741,\n        \"min\": 14.06602753282446,\n        \"max\": 28.763998681689685,\n        \"num_unique_values\": 1222,\n        \"samples\": [\n          17.498866332455556,\n          15.101953190639634,\n          17.357723395607316\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Maximo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.9341893682799363,\n        \"min\": 14.19174861907959,\n        \"max\": 29.040000915527344,\n        \"num_unique_values\": 1224,\n        \"samples\": [\n          16.814365857553497,\n          18.252484148971988,\n          19.67037268398213\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Minimo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.927263620340097,\n        \"min\": 13.984680048495797,\n        \"max\": 28.459999084472656,\n        \"num_unique_values\": 1223,\n        \"samples\": [\n          16.604669371532545,\n          17.750452383407765,\n          19.308470382915754\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mm5d\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.9147912397454565,\n        \"min\": 14.178437805175781,\n        \"max\": 28.51399955749512,\n        \"num_unique_values\": 1221,\n        \"samples\": [\n          14.561528205871582,\n          18.4739070892334,\n          17.12825126647949\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mm14d\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.869345439636017,\n        \"min\": 14.312703336988177,\n        \"max\": 28.310905865260533,\n        \"num_unique_values\": 1222,\n        \"samples\": [\n          17.748958587646484,\n          14.711259910038539,\n          17.36154978615897\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mm21d\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.837710847895125,\n        \"min\": 14.445332572573708,\n        \"max\": 28.182735352289107,\n        \"num_unique_values\": 1224,\n        \"samples\": [\n          16.535100028628396,\n          17.42343521118164,\n          18.75856553940546\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 95
        }
      ],
      "source": [
        "preditoras.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "cfa0f10a",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "cfa0f10a",
        "outputId": "74789fe5-2077-439b-a52e-a536f65fd201"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Abertura  Maximo  Minimo  mm5d  mm14d  mm21d\n",
              "1239     28.49   28.94   28.44 28.51  27.57  27.13\n",
              "1240     28.60   28.66   28.28 28.45  27.72  27.22\n",
              "1241     28.32   28.39   28.16 28.42  27.84  27.32\n",
              "1242     28.31   28.31   27.91 28.35  27.95  27.41\n",
              "1243     28.06   28.06   27.56 28.22  28.05  27.49"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d667a4ad-a118-4106-a589-db27ff2ca608\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Abertura</th>\n",
              "      <th>Maximo</th>\n",
              "      <th>Minimo</th>\n",
              "      <th>mm5d</th>\n",
              "      <th>mm14d</th>\n",
              "      <th>mm21d</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1239</th>\n",
              "      <td>28.49</td>\n",
              "      <td>28.94</td>\n",
              "      <td>28.44</td>\n",
              "      <td>28.51</td>\n",
              "      <td>27.57</td>\n",
              "      <td>27.13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1240</th>\n",
              "      <td>28.60</td>\n",
              "      <td>28.66</td>\n",
              "      <td>28.28</td>\n",
              "      <td>28.45</td>\n",
              "      <td>27.72</td>\n",
              "      <td>27.22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1241</th>\n",
              "      <td>28.32</td>\n",
              "      <td>28.39</td>\n",
              "      <td>28.16</td>\n",
              "      <td>28.42</td>\n",
              "      <td>27.84</td>\n",
              "      <td>27.32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1242</th>\n",
              "      <td>28.31</td>\n",
              "      <td>28.31</td>\n",
              "      <td>27.91</td>\n",
              "      <td>28.35</td>\n",
              "      <td>27.95</td>\n",
              "      <td>27.41</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1243</th>\n",
              "      <td>28.06</td>\n",
              "      <td>28.06</td>\n",
              "      <td>27.56</td>\n",
              "      <td>28.22</td>\n",
              "      <td>28.05</td>\n",
              "      <td>27.49</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d667a4ad-a118-4106-a589-db27ff2ca608')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d667a4ad-a118-4106-a589-db27ff2ca608 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d667a4ad-a118-4106-a589-db27ff2ca608');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b4c94ad6-5a16-44bb-b69a-9c1ef353b34f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b4c94ad6-5a16-44bb-b69a-9c1ef353b34f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b4c94ad6-5a16-44bb-b69a-9c1ef353b34f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"preditoras\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Abertura\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.20525624965243103,\n        \"min\": 28.059999465942383,\n        \"max\": 28.600000381469727,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          28.600000381469727,\n          28.059999465942383,\n          28.31999969482422\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Maximo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.33803888670595234,\n        \"min\": 28.059999465942383,\n        \"max\": 28.940000534057617,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          28.65999984741211,\n          28.059999465942383,\n          28.389999389648438\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Minimo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.34452911694655197,\n        \"min\": 27.559999465942383,\n        \"max\": 28.440000534057617,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          28.280000686645508,\n          27.559999465942383,\n          28.15999984741211\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mm5d\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.11314590365504665,\n        \"min\": 28.215999603271484,\n        \"max\": 28.51399955749512,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          28.445999526977538,\n          28.215999603271484,\n          28.415999603271484\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mm14d\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.18958086658002773,\n        \"min\": 27.5722074508667,\n        \"max\": 28.052207401820592,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          27.71577889578683,\n          28.052207401820592,\n          27.84253215789795\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mm21d\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1431695286342653,\n        \"min\": 27.130918956938245,\n        \"max\": 27.488519850231352,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          27.220130375453405,\n          27.488519850231352,\n          27.324959164574032\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 96
        }
      ],
      "source": [
        "preditoras.tail()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6fea65f9",
      "metadata": {
        "id": "6fea65f9"
      },
      "outputs": [],
      "source": [
        "# Normalizando os dados\n",
        "scaler = MinMaxScaler().fit(preditoras)\n",
        "preditoras_normalizadas = scaler.transform(preditoras)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6eb79590",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6eb79590",
        "outputId": "f3eedf02-93c7-4350-c4f8-2e3091b6e7b0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Preditoras:  (1224, 6)\n",
            "[[0.10245979 0.1043088  0.09898036 0.0733964  0.08232575 0.06400814]\n",
            " [0.06540404 0.05769514 0.05843402 0.07951505 0.07646358 0.06169365]\n",
            " [0.07401178 0.10739866 0.06571735 0.09014596 0.07293274 0.06426199]\n",
            " ...\n",
            " [0.96979182 0.9562237  0.97927512 0.99316386 0.96654044 0.93755907]\n",
            " [0.96911144 0.95083587 0.96200434 0.98842041 0.97432901 0.9436999 ]\n",
            " [0.95210229 0.93399887 0.93782523 0.97921254 0.98151917 0.9494653 ]]\n"
          ]
        }
      ],
      "source": [
        "# Verificando a normalização realizada\n",
        "print('Preditoras: ', preditoras_normalizadas.shape)\n",
        "print(preditoras_normalizadas)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "96d8de7b",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "96d8de7b",
        "outputId": "e14fd2f5-b0a4-41d9-94b7-e1415f08b5dc"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "824 824\n",
            "380 380\n"
          ]
        }
      ],
      "source": [
        "# Separando dados para treino e teste\n",
        "X_Train = preditoras_normalizadas[:qtd_linhas_treino]\n",
        "X_test = preditoras_normalizadas[qtd_linhas_treino:qtd_linhas_teste]\n",
        "\n",
        "Y_Train = target[:qtd_linhas_treino]\n",
        "Y_test = target[qtd_linhas_treino:qtd_linhas_teste]\n",
        "\n",
        "print(len(X_Train), len(Y_Train))\n",
        "print(len(X_test), len(Y_test))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7b638856",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "7b638856",
        "outputId": "c83e872f-61ab-4b94-acfd-c36823a2db6c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'Coeficiente de determinação:99.84'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 100
        }
      ],
      "source": [
        "# Treinamento usando regressão linear\n",
        "lr = linear_model.LinearRegression()\n",
        "lr.fit(X_Train, Y_Train )\n",
        "predicao = lr.predict(X_test)\n",
        "cd = r2_score(Y_test, predicao)\n",
        "\n",
        "f'Coeficiente de determinação:{cd * 100:.2f}'\n",
        "\n",
        "#Lembrete: Coeficiente de determinação determina a aproximação da linha de regressão.\n",
        "# Quanto mais próximo de 1 melhor."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f6b61b1f",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "f6b61b1f",
        "outputId": "40c75989-1f55-4469-b23f-f48d1bb1ce41"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'Coeficiente de determinação:94.01'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 101
        }
      ],
      "source": [
        "# Treinamento usando rede neural\n",
        "rn = MLPRegressor(max_iter = 2000)\n",
        "rn.fit(X_Train, Y_Train )\n",
        "predicao = rn.predict(X_test)\n",
        "cd = rn.score(X_test,Y_test)\n",
        "\n",
        "f'Coeficiente de determinação:{cd * 100:.2f}'\n",
        "\n",
        "#Lembrete: Coeficiente de determinação determina a aproximação da linha de regressão.\n",
        "# Quanto mais próximo de 1 melhor."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "46f1001f",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 708
        },
        "id": "46f1001f",
        "outputId": "c5a2ce53-59bb-4c9d-d438-165b3ec8257c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                           Real  Previsão\n",
              "Data_Pregão                              \n",
              "2025-02-28 00:00:00-03:00 25.95     26.07\n",
              "2025-03-05 00:00:00-03:00 26.36     26.21\n",
              "2025-03-06 00:00:00-03:00 26.30     26.43\n",
              "2025-03-07 00:00:00-03:00 26.55     26.53\n",
              "2025-03-10 00:00:00-03:00 26.56     26.43\n",
              "2025-03-11 00:00:00-03:00 26.39     26.40\n",
              "2025-03-12 00:00:00-03:00 26.48     26.46\n",
              "2025-03-13 00:00:00-03:00 26.74     26.80\n",
              "2025-03-14 00:00:00-03:00 27.69     27.51\n",
              "2025-03-17 00:00:00-03:00 28.28     28.11\n",
              "2025-03-18 00:00:00-03:00 28.45     28.77\n",
              "2025-03-19 00:00:00-03:00 28.65     28.62\n",
              "2025-03-20 00:00:00-03:00 28.47     28.56\n",
              "2025-03-21 00:00:00-03:00 28.43     28.43\n",
              "2025-03-24 00:00:00-03:00 28.46     28.37\n",
              "2025-03-25 00:00:00-03:00 28.56     28.83\n",
              "2025-03-26 00:00:00-03:00 28.31     28.43\n",
              "2025-03-27 00:00:00-03:00 28.32     28.28\n",
              "2025-03-28 00:00:00-03:00 28.09     28.03\n",
              "2025-03-31 00:00:00-03:00 27.80     27.70"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-09c6f3c7-bc90-46ac-b915-5f3a9e196edf\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Real</th>\n",
              "      <th>Previsão</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Data_Pregão</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2025-02-28 00:00:00-03:00</th>\n",
              "      <td>25.95</td>\n",
              "      <td>26.07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-03-05 00:00:00-03:00</th>\n",
              "      <td>26.36</td>\n",
              "      <td>26.21</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-03-06 00:00:00-03:00</th>\n",
              "      <td>26.30</td>\n",
              "      <td>26.43</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-03-07 00:00:00-03:00</th>\n",
              "      <td>26.55</td>\n",
              "      <td>26.53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-03-10 00:00:00-03:00</th>\n",
              "      <td>26.56</td>\n",
              "      <td>26.43</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-03-11 00:00:00-03:00</th>\n",
              "      <td>26.39</td>\n",
              "      <td>26.40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-03-12 00:00:00-03:00</th>\n",
              "      <td>26.48</td>\n",
              "      <td>26.46</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-03-13 00:00:00-03:00</th>\n",
              "      <td>26.74</td>\n",
              "      <td>26.80</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-03-14 00:00:00-03:00</th>\n",
              "      <td>27.69</td>\n",
              "      <td>27.51</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-03-17 00:00:00-03:00</th>\n",
              "      <td>28.28</td>\n",
              "      <td>28.11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-03-18 00:00:00-03:00</th>\n",
              "      <td>28.45</td>\n",
              "      <td>28.77</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-03-19 00:00:00-03:00</th>\n",
              "      <td>28.65</td>\n",
              "      <td>28.62</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-03-20 00:00:00-03:00</th>\n",
              "      <td>28.47</td>\n",
              "      <td>28.56</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-03-21 00:00:00-03:00</th>\n",
              "      <td>28.43</td>\n",
              "      <td>28.43</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-03-24 00:00:00-03:00</th>\n",
              "      <td>28.46</td>\n",
              "      <td>28.37</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-03-25 00:00:00-03:00</th>\n",
              "      <td>28.56</td>\n",
              "      <td>28.83</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-03-26 00:00:00-03:00</th>\n",
              "      <td>28.31</td>\n",
              "      <td>28.43</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-03-27 00:00:00-03:00</th>\n",
              "      <td>28.32</td>\n",
              "      <td>28.28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-03-28 00:00:00-03:00</th>\n",
              "      <td>28.09</td>\n",
              "      <td>28.03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2025-03-31 00:00:00-03:00</th>\n",
              "      <td>27.80</td>\n",
              "      <td>27.70</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-09c6f3c7-bc90-46ac-b915-5f3a9e196edf')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-09c6f3c7-bc90-46ac-b915-5f3a9e196edf button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-09c6f3c7-bc90-46ac-b915-5f3a9e196edf');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-bbe9c534-7aad-4045-acd8-f522db1dba00\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bbe9c534-7aad-4045-acd8-f522db1dba00')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-bbe9c534-7aad-4045-acd8-f522db1dba00 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_ed206c97-f0a8-4db7-8ea6-f86de7225b0e\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_ed206c97-f0a8-4db7-8ea6-f86de7225b0e button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 20,\n  \"fields\": [\n    {\n      \"column\": \"Data_Preg\\u00e3o\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2025-02-28 00:00:00-03:00\",\n        \"max\": \"2025-03-31 00:00:00-03:00\",\n        \"num_unique_values\": 20,\n        \"samples\": [\n          \"2025-02-28 00:00:00-03:00\",\n          \"2025-03-27 00:00:00-03:00\",\n          \"2025-03-25 00:00:00-03:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Real\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9797716497619631,\n        \"min\": 25.945985794067383,\n        \"max\": 28.649999618530273,\n        \"num_unique_values\": 20,\n        \"samples\": [\n          25.945985794067383,\n          28.31999969482422,\n          28.559999465942383\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Previs\\u00e3o\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0059149464511037,\n        \"min\": 26.071368457078602,\n        \"max\": 28.831993249184787,\n        \"num_unique_values\": 20,\n        \"samples\": [\n          26.071368457078602,\n          28.2820388702132,\n          28.831993249184787\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 102
        }
      ],
      "source": [
        "# Executando a previsão\n",
        "previsao = preditoras_normalizadas[qtd_linhas_teste:qtd_linhas]\n",
        "data_pregao_full = dados['Data']\n",
        "data_pregao = data_pregao_full[qtd_linhas_teste:qtd_linhas]\n",
        "\n",
        "res_full = dados['Fechamento']\n",
        "res = res_full[qtd_linhas_teste:qtd_linhas]\n",
        "\n",
        "pred = lr.predict(previsao)\n",
        "\n",
        "df = pd.DataFrame({'Data_Pregão':data_pregao, 'Real': res, 'Previsão':pred})\n",
        "\n",
        "df.set_index('Data_Pregão', inplace = True)\n",
        "\n",
        "df"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Previsão para o dia seguinte"
      ],
      "metadata": {
        "id": "xip_TfHVBYTL"
      },
      "id": "xip_TfHVBYTL"
    },
    {
      "cell_type": "code",
      "source": [
        "# Pega o último pregão disponível\n",
        "dados_hoje = yF.download(\"ITUB3.SA\", period=\"1d\")\n",
        "\n",
        "# Renomeia as colunas para manter consistência (igual foi feito no dataframe principal)\n",
        "dados_hoje = dados_hoje.rename(columns={\n",
        "    'Open': 'Abertura',\n",
        "    'High': 'Maximo',\n",
        "    'Low': 'Minimo',\n",
        "    'Close': 'Fechamento',  # Aqui está a correção principal\n",
        "    'Volume': 'Volume'\n",
        "})\n",
        "# Verifica se temos dados válidos\n",
        "\n",
        "\n",
        "if dados_hoje.empty:\n",
        "    print(\"Não foi possível obter dados do último pregão.\")\n",
        "else:\n",
        "    try:\n",
        "        # Calcula médias móveis com os últimos dados históricos\n",
        "        # USANDO A COLUNA 'Fechamento' que foi renomeada no dataframe principal\n",
        "        ultimos_5d = dados['Fechamento'].iloc[-5:].mean()\n",
        "        ultimos_14d = dados['Fechamento'].iloc[-14:].mean()\n",
        "        ultimos_21d = dados['Fechamento'].iloc[-21:].mean()\n",
        "\n",
        "        # Prepara os dados para amanhã\n",
        "        dados_amanha = pd.DataFrame({\n",
        "            'Abertura': [float(dados_hoje['Abertura'].iloc[-1])],\n",
        "            'Maximo': [float(dados_hoje['Maximo'].iloc[-1])],\n",
        "            'Minimo': [float(dados_hoje['Minimo'].iloc[-1])],\n",
        "            'mm5d': [ultimos_5d],\n",
        "            'mm14d': [ultimos_14d],\n",
        "            'mm21d': [ultimos_21d]\n",
        "        })\n",
        "\n",
        "        # Normaliza e prevê\n",
        "        X_amanha = scaler.transform(dados_amanha)\n",
        "        previsao_amanha_lr = float(lr.predict(X_amanha)[0])\n",
        "        previsao_amanha_rn = float(rn.predict(X_amanha)[0])\n",
        "\n",
        "        # Exibe resultados\n",
        "        print(\"\\n\" + \"=\"*50)\n",
        "        print(f\"PREVISÃO PARA O PRÓXIMO PREGÃO:\")\n",
        "        print(f\"- Data do último pregão: {dados_hoje.index[-1].strftime('%d/%m/%Y')}\")\n",
        "        print(f\"- Preço de fechamento hoje: R$ {float(dados_hoje['Fechamento'].iloc[-1]):.2f}\")\n",
        "        print(f\"- Previsão (Regressão Linear): R$ {previsao_amanha_lr:.2f}\")\n",
        "        print(f\"- Previsão (Rede Neural): R$ {previsao_amanha_rn:.2f}\")\n",
        "        print(\"=\"*50 + \"\\n\")\n",
        "\n",
        "    except Exception as e:\n",
        "        print(f\"Erro ao gerar previsão: {str(e)}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "J1PYuBkvBC3d",
        "outputId": "47f90ca0-ae27-4005-f04a-900e9944e69b"
      },
      "id": "J1PYuBkvBC3d",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\r[*********************100%***********************]  1 of 1 completed"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "==================================================\n",
            "PREVISÃO PARA O PRÓXIMO PREGÃO:\n",
            "- Data do último pregão: 31/03/2025\n",
            "- Preço de fechamento hoje: R$ 27.81\n",
            "- Previsão (Regressão Linear): R$ 27.70\n",
            "- Previsão (Rede Neural): R$ 28.95\n",
            "==================================================\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Configurações do gráfico\n",
        "plt.figure(figsize=(16, 8))\n",
        "plt.title('Preço das Ações - Histórico e Previsão', fontsize=16, pad=20)\n",
        "\n",
        "# Plot dos dados históricos\n",
        "plt.plot(df.index, df['Real'],\n",
        "         label='Valor Real (Histórico)',\n",
        "         color='blue',\n",
        "         marker='o',\n",
        "         linestyle='-',\n",
        "         linewidth=1.5,\n",
        "         markersize=5)\n",
        "\n",
        "# Plot das previsões (validação)\n",
        "plt.plot(df.index, df['Previsão'],\n",
        "         label='Previsão (Validação)',\n",
        "         color='red',\n",
        "         marker='o',\n",
        "         linestyle='--',\n",
        "         linewidth=1.5,\n",
        "         markersize=5)\n",
        "\n",
        "# Adicionando a previsão para amanhã\n",
        "ultima_data = df.index[-1]\n",
        "proxima_data = ultima_data + pd.Timedelta(days=1)\n",
        "\n",
        "plt.scatter(proxima_data, previsao_amanha_lr,\n",
        "            label=f'Previsão Amanhã (Linear): R$ {previsao_amanha_lr:.2f}',\n",
        "            color='green',\n",
        "            marker='*',\n",
        "            s=200)\n",
        "\n",
        "plt.scatter(proxima_data, previsao_amanha_rn,\n",
        "            label=f'Previsão Amanhã (Rede Neural): R$ {previsao_amanha_rn:.2f}',\n",
        "            color='purple',\n",
        "            marker='X',\n",
        "            s=200)\n",
        "\n",
        "# Formatação do gráfico\n",
        "plt.xlabel('Data do Pregão', fontsize=12)\n",
        "plt.ylabel('Preço de Fechamento (R$)', fontsize=12)\n",
        "plt.grid(True, linestyle='--', alpha=0.6)\n",
        "plt.xticks(rotation=45)\n",
        "plt.legend(fontsize=10, loc='upper left')\n",
        "\n",
        "# Adiciona anotações\n",
        "plt.annotate(f'Último pregão: {dados_hoje.index[-1].strftime(\"%d/%m/%Y\")}\\n'\n",
        "            f'Fechamento: R$ {float(dados_hoje[\"Fechamento\"].iloc[-1]):.2f}',\n",
        "            xy=(0.02, 0.95),\n",
        "            xycoords='axes fraction',\n",
        "            bbox=dict(boxstyle='round', fc='white', ec='gray', alpha=0.8))\n",
        "\n",
        "# Ajusta os limites do eixo X para incluir a previsão\n",
        "plt.xlim([df.index[0], proxima_data + pd.Timedelta(days=1)])\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 634
        },
        "id": "kaCYNIH1OckE",
        "outputId": "ebeb1313-5c28-4840-9419-04194f5d681c"
      },
      "id": "kaCYNIH1OckE",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1600x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3519b204",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 667
        },
        "collapsed": true,
        "id": "3519b204",
        "outputId": "ec7c78ff-5a31-4efb-861c-91da4572e4d9"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1600x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Gerando o Gráfico\n",
        "plt.figure(figsize = (16,8))\n",
        "plt.title('Preço das Ações')\n",
        "plt.plot(df['Real'], label = 'Real', color = 'blue', marker = 'o')\n",
        "plt.plot(df['Previsão'], label = 'Previsão', color = 'red', marker = 'o')\n",
        "plt.xlabel('Data Pregão')\n",
        "plt.ylabel('Preço Fechamento')\n",
        "leg = plt.legend()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "07a61e9d",
      "metadata": {
        "id": "07a61e9d"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.10.9"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}